"""refactor set to step

Revision ID: 914eed746952
Revises: 53ca5f6c3e22
Create Date: 2025-09-18 15:26:59.674124

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "914eed746952"
down_revision: Union[str, Sequence[str], None] = "53ca5f6c3e22"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "workout_steps",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("workout_id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=True),
        sa.Column("order", sa.Integer(), nullable=False),
        sa.Column("value", sa.Integer(), nullable=False),
        sa.Column(
            "type",
            sa.Enum(
                "DISTANCE",
                "TIME",
                "REPS",
                "REST",
                "WARM_UP",
                "COOL_DOWN",
                name="workout_step_type",
            ),
            nullable=False,
        ),
        sa.Column("repetitions", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["workout_id"],
            ["workouts.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_workout_steps_id"), "workout_steps", ["id"], unique=False)
    op.drop_index(op.f("ix_workout_sets_id"), table_name="workout_sets")
    op.drop_table("workout_sets")
    op.alter_column(
        "plans",
        "level",
        existing_type=postgresql.ENUM(
            "BEGINNER", "INTERMEDIATE", "ADVANCED", name="level"
        ),
        type_=sa.Enum("BEGINNER", "INTERMEDIATE", "ADVANCED", name="level"),
        existing_nullable=False,
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "plans",
        "level",
        existing_type=sa.Enum("BEGINNER", "INTERMEDIATE", "ADVANCED", name="level"),
        type_=postgresql.ENUM("BEGINNER", "INTERMEDIATE", "ADVANCED", name="level"),
        existing_nullable=False,
    )
    op.create_table(
        "workout_sets",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("workout_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("active_value", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column(
            "active_measure_type",
            postgresql.ENUM(
                "DISTANCE", "TIME", "REPS", name="workout_set_measure_type"
            ),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("recovery_value", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "recovery_measure_type",
            postgresql.ENUM(
                "DISTANCE", "TIME", "REPS", name="workout_set_measure_type"
            ),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("order", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("description", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("repetitions", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(
            ["workout_id"], ["workouts.id"], name=op.f("workout_sets_workout_id_fkey")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("workout_sets_pkey")),
    )
    op.create_index(op.f("ix_workout_sets_id"), "workout_sets", ["id"], unique=False)
    op.drop_index(op.f("ix_workout_steps_id"), table_name="workout_steps")
    op.drop_table("workout_steps")
    # ### end Alembic commands ###
